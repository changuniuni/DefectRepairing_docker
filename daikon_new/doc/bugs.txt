Various minor bugs that should be fixed at some point

Daikon

  - isDerivedParamAndUninteresting doesn't differentiate between
    Entry ppts and Exit ppts.  It thus calls the value of parameters
    at entry uninteresting (even though they clearly make sense
    as preconditions).

  - The list of variables and modified variables in ESC, JML, and
    possibly other output formats should be formatted in the appropriate
    format rather than in Daikon format. 

  - The parent filter does not take equality sets into account.  The
    filter will only remove an invariant if its leader matches the
    parent.  Any match between members of the two equality sets should
    be sufficient.

  - The placement of 'orig' is not consistent.  In some cases it is
    forced to the outside (eg, orig(size(a[])) rather than size(orig(a[])),
    but in other cases it is not (eg, size is the only function changed
    in this manner -- all functions over arrays should have this change).

  - Post variables within orig (eg, orig(a[post(i)])) are not supported
    in ESC and JML formats.  Previously we tried to fix this problem by
    looking for equivalent orig variables, but this only works a small
    percentage of the time.  Another solution, such as using a quantifier
    variable or a ghost variable would work more consistently.

    In ESC it should be possible to represent 'orig(a[post(i)]) == 3' as

      \forall int bi; (bi = i) ==> \old(a[bi]) == 3

  - Guarding needs to be rewritten in the new decl format.  It still
    uses VarInfoName parsing.
      
  - Error exits are not handled properly.  The enter and exit values
    are ignored.  Particularly in the case of enter values, this means
    that invariants may be incorrect (imagine a method that crashes each
    time a null parameter is passed to it).  The invariant will say
    that the parameter was never null.

    The canBeMissing flag ends up incorrect as well since it is never
    propogated to the exit methods.

    The best solution would be to treat exceptional exits as another
    exit to the method and merge it along with the normal exit points.

  - Chicory doesn't instrument itself.  It determines this by looking
    at the name of the class (in general, classes that start with
    daikon/Chicory should not be instrumented).  The new decl format
    uses some enums from daikon and these need to be ignored as well.
    This is not optimal as it causes some classnames to be hardcoded
    and it may create some problems in instrumenting daikon itself.
    It would be better to move all of these definitions into Chicory and
    have Daikon reference them rather than the other way around (or put
    them in a different package).

  - Much of the code in VarInfo.isDerivedParamAndUninteresting is hacked
    in the new decl format to match the old.  In particular, the check
    for size and type doesn't appear to be correct.  They only check
    that the direct base is a param and probably they should check that
    the variables is enclosed by a parameter.  And the size should should
    certainly not only pass if the shift is 0. 

  - Simplify's implementation of orig is not correct.  Only the base
    of a field is marked as orig (eg, only 'a' from the field reference
    'a.b.c' is marked as orig).  This could lead to contradictory
    invariants, since orig(a.b.c) is not necessarily equal to orig(a).b.c.

  - DBD and JAVA variable name formats both use JML format.  This is
    probably not correct.  We don't have regression tests for these either.
    It would be good if we added regression tests if these are really 
    different from JML.
